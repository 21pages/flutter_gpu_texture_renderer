// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void StartDuplicateThread(
    ffi.Pointer<ffi.Void> pDevice,
  ) {
    return _StartDuplicateThread(
      pDevice,
    );
  }

  late final _StartDuplicateThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'StartDuplicateThread');
  late final _StartDuplicateThread = _StartDuplicateThreadPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  void StopDuplicateThread() {
    return _StopDuplicateThread();
  }

  late final _StopDuplicateThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('StopDuplicateThread');
  late final _StopDuplicateThread =
      _StopDuplicateThreadPtr.asFunction<void Function()>();

  void AddOutput(
    ffi.Pointer<ffi.Void> output,
  ) {
    return _AddOutput(
      output,
    );
  }

  late final _AddOutputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'AddOutput');
  late final _AddOutput =
      _AddOutputPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void RemoveOutput(
    ffi.Pointer<ffi.Void> output,
  ) {
    return _RemoveOutput(
      output,
    );
  }

  late final _RemoveOutputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'RemoveOutput');
  late final _RemoveOutput =
      _RemoveOutputPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}
