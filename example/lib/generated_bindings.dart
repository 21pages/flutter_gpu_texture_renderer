// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void SetAndStartDuplicateThread(
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pDevice,
  ) {
    return _SetAndStartDuplicateThread(
      pOutput,
      pDevice,
    );
  }

  late final _SetAndStartDuplicateThreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('SetAndStartDuplicateThread');
  late final _SetAndStartDuplicateThread =
      _SetAndStartDuplicateThreadPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void StopDuplicateThread() {
    return _StopDuplicateThread();
  }

  late final _StopDuplicateThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('StopDuplicateThread');
  late final _StopDuplicateThread =
      _StopDuplicateThreadPtr.asFunction<void Function()>();
}
